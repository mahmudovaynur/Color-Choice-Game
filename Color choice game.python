{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cbbe944e-5e6b-4d8b-94ba-6a30bd675ba0",
   "metadata": {},
   "source": [
    "## Colors Choices Game coding in python(red, yellow, orange, green, blue)\n",
    "## (CCG):"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ea19c8e-3de2-4151-9176-4cc717dfe0d0",
   "metadata": {},
   "source": [
    "### Table of Contents\n",
    "#### - [Project Helpful Notes](#Project_Helpful_Notes)\n",
    "#### - [Project Helpful Steps](#Project_Helpful_Steps)\n",
    "#### - [Show colors choices to user to choose and enter a color](#Show_colors_choices_to_user_to_choose_&_enter_a_color)\n",
    "#### - [Thanks for playing and the overall result of the game](#Thanks_for_playing_and_the_overall_result_of_the_game)\n",
    "#### - [Conclusions](#Conclusions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3483ed0-c27c-413f-bdc1-5795bed88fb1",
   "metadata": {},
   "source": [
    "## <a id='Project_Helpful_Notes'></a>\n",
    "### Project Helpful Notes:\n",
    "#### 1.We need to create choices for players and choices for computer then ask the players for inputs.\n",
    "#### 2.compare their inputs with the choice of the computer.\n",
    "#### 3.Check if the game is won,tied, lost, or ongoing.\n",
    "#### 4.Repeat thess steps until the game has been won or tied.\n",
    "#### 5.Ask if players want to play again.\n",
    "#### 6.and if the players agree restart the game again."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60532f15-df81-409c-8a57-01a019da8a6a",
   "metadata": {},
   "source": [
    "## <a id='Project_Helpful_Steps'></a>\n",
    "### Project Helpful Steps:\n",
    "#### 1.importing needed modules for our project.\n",
    "#### 2.Then we will define the main while loop and put the second while loop inside it.\n",
    "#### 3.declare colors choices as variables and specify colors of the game inside the nested while loop.\n",
    "#### 4.define the game roles by using the second while loop, If Statements and the random moduleâ€™s randint function to get an integer between one and five.\n",
    "#### 5.then print the outputs of this big nested loop and hte If statements inside this big while loop.\n",
    "#### 6.show the scores of computer and player after each player turn.\n",
    "#### 7.use the If statements to ask the player if he want to play again.\n",
    "#### 8.if the player choose \"Yes\" so restart the game.\n",
    "#### 9.if the player say \"No\" so end the game and say \"thanks for playing\"."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c632e50-0715-4011-840c-88e3b7f38685",
   "metadata": {
    "tags": []
   },
   "source": [
    "## importing needed modules for our project:\n",
    "## import random module "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "27b166d4-014a-4c36-9428-e26f1af4d871",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e0fcaf-fa61-4c41-b5d9-d1753d0402a2",
   "metadata": {
    "tags": []
   },
   "source": [
    "#<a id='Show_colors_choices_to_user_to_choose_&_enter_a_color'></a>\n",
    "### Declare computer_score and player_score as variables\n",
    "### Show colors choices to user to choose & enter a color value number:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "abd4def4-57ae-4552-8a9e-19135550d3b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Winning Rules of the Colors choices Game as follows: \n",
      "Enter a number from one to five and match computer choice to Win the computer.\n",
      "red = 1 \n",
      "yellow = 2 \n",
      "orange = 3 \n",
      "green = 4 \n",
      "blue = 5 \n",
      "take a turn: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "User turn:  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "user color choice is: blue\n",
      "\n",
      "Now its computer turn to choose a color.......\n",
      "Computer color choice is: orange\n",
      "player_score: 0\n",
      "computer_score: 1\n",
      "Do you want to play again? (Y/N)\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " y\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "red = 1 \n",
      "yellow = 2 \n",
      "orange = 3 \n",
      "green = 4 \n",
      "blue = 5 \n",
      "take a turn: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "User turn:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "user color choice is: yellow\n",
      "\n",
      "Now its computer turn to choose a color.......\n",
      "Computer color choice is: orange\n",
      "player_score: 0\n",
      "computer_score: 2\n",
      "Do you want to play again? (Y/N)\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " n\n"
     ]
    }
   ],
   "source": [
    "print(\"Winning Rules of the Colors choices Game as follows: \"+ \"\\nEnter a number from one to five and match computer choice to Win the computer.\") \n",
    "computer_score = 0\n",
    "player_score = 0 \n",
    "while True: \n",
    "    print(\"red = 1 \\nyellow = 2 \\norange = 3 \\ngreen = 4 \\nblue = 5 \\ntake a turn: \") \n",
    " \n",
    "    # take the input from user \n",
    "    player_choice = int(input(\"User turn: \")) \n",
    "  \n",
    "    # OR is the short-circuit operator \n",
    "    # if any one of the condition is true \n",
    "    # then it return True value \n",
    "      \n",
    "    # looping until user enter invalid input \n",
    "    while player_choice > 5 and player_choice < 1: \n",
    "        player_choice = int(input(\"enter valid input: \"))\n",
    "          \n",
    "  \n",
    "    # initialize value of choice_col variable \n",
    "    # corresponding to the player_choice value \n",
    "    if player_choice == 1: \n",
    "        choice_col = 'red'\n",
    "    elif player_choice == 2: \n",
    "        choice_col = 'yellow'\n",
    "    elif player_choice == 3: \n",
    "        choice_col= 'orange'\n",
    "    elif player_choice== 4: \n",
    "        choice_col = 'green'    \n",
    "    else: \n",
    "        choice_col = 'blue'\n",
    "          \n",
    "    # print user choice  \n",
    "    print(\"user color choice is: \" + choice_col) \n",
    "    print(\"\\nNow its computer turn to choose a color.......\") \n",
    "  \n",
    "    # Computer chooses randomly any number  \n",
    "    # among 1 , 2 and 3. Using randint method \n",
    "    # of random module \n",
    "    computer_choice = random.randint(1, 5) \n",
    "      \n",
    "    # looping until comp_choice value  \n",
    "    # is equal to the choice value \n",
    "    while computer_choice == player_choice: \n",
    "        computer_choice = random.randint(1, 5) \n",
    "  \n",
    "    # initialize value of compu_choice_col  \n",
    "    # variable corresponding to the computer_choice value \n",
    "    if computer_choice == 1: \n",
    "        compu_choice_col = 'red'\n",
    "    elif computer_choice == 2: \n",
    "        compu_choice_col = 'yellow'\n",
    "    elif computer_choice == 3: \n",
    "        compu_choice_col = 'orange'\n",
    "    elif computer_choice == 4: \n",
    "        compu_choice_col = 'green'    \n",
    "    else: \n",
    "        compu_choice_col = 'blue'\n",
    "          \n",
    "    print(\"Computer color choice is: \" + compu_choice_col) \n",
    "\n",
    "    # conditions for winning \n",
    "    if(choice_col == compu_choice_col):\n",
    "        player_score += 1\n",
    "        print(\"player_score: \"+str(player_score))\n",
    "        print(\"computer_score: \"+str(computer_score))\n",
    "    else:\n",
    "        computer_score += 1\n",
    "         \n",
    "        print(\"player_score: \" + str(player_score))\n",
    "        print(\"computer_score: \" +str(computer_score))\n",
    "    print(\"Do you want to play again? (Y/N)\") \n",
    "    answer = input() \n",
    "  \n",
    "  \n",
    "    # if user input n or N then condition is True \n",
    "  \n",
    "    if answer == 'n' or answer == 'N': \n",
    "        break  \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d74567d-020c-4939-8b8a-ebf348d3c4fc",
   "metadata": {
    "tags": []
   },
   "source": [
    "# <a id='Thanks_for_playing_and_the_overall_result_of_the_game'></a>\n",
    "### Thanks for playing and the overall result of the game:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6abc864-5a00-4a83-a75f-3ecf9145a77a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "<== Computer wins ==>\n",
      "\n",
      "Player is Defeated\n",
      "\n",
      "Thanks for playing\n"
     ]
    }
   ],
   "source": [
    "# after coming out of the while loop \n",
    "# we print thanks for playing and the overall result of the game.\n",
    "if computer_score == player_score:\n",
    "    print(\"Game is Tied\")\n",
    "    print(\"\\nThanks for playing\") \n",
    "elif computer_score < player_score:\n",
    "    print(\"Player is Victorious\")\n",
    "    print(\"<== User wins ==>\")\n",
    "    print(\"\\nThanks for playing\")\n",
    "elif computer_score > player_score:\n",
    "    print(\"\\n<== Computer wins ==>\")\n",
    "    print(\"\\nPlayer is Defeated\")\n",
    "    print(\"\\nThanks for playing\")    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c203d1a-661e-42a1-a1f3-d0eefc4c8654",
   "metadata": {},
   "source": [
    "#<a id='Conclusions'></a>\n",
    "### Conclusions\n",
    "Thanks for attention\n",
    "*Mahmudova Aynur*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a081d643-d6a5-4afc-bf96-87e78fa4700d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
